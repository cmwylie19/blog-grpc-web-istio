// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NumbersClient is the client API for Numbers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NumbersClient interface {
	GetNumbers(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (Numbers_GetNumbersClient, error)
}

type numbersClient struct {
	cc grpc.ClientConnInterface
}

func NewNumbersClient(cc grpc.ClientConnInterface) NumbersClient {
	return &numbersClient{cc}
}

func (c *numbersClient) GetNumbers(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (Numbers_GetNumbersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Numbers_ServiceDesc.Streams[0], "/numbers.Numbers/GetNumbers", opts...)
	if err != nil {
		return nil, err
	}
	x := &numbersGetNumbersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Numbers_GetNumbersClient interface {
	Recv() (*NumberResponse, error)
	grpc.ClientStream
}

type numbersGetNumbersClient struct {
	grpc.ClientStream
}

func (x *numbersGetNumbersClient) Recv() (*NumberResponse, error) {
	m := new(NumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NumbersServer is the server API for Numbers service.
// All implementations must embed UnimplementedNumbersServer
// for forward compatibility
type NumbersServer interface {
	GetNumbers(*NumberRequest, Numbers_GetNumbersServer) error
	mustEmbedUnimplementedNumbersServer()
}

// UnimplementedNumbersServer must be embedded to have forward compatible implementations.
type UnimplementedNumbersServer struct {
}

func (UnimplementedNumbersServer) GetNumbers(*NumberRequest, Numbers_GetNumbersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNumbers not implemented")
}
func (UnimplementedNumbersServer) mustEmbedUnimplementedNumbersServer() {}

// UnsafeNumbersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NumbersServer will
// result in compilation errors.
type UnsafeNumbersServer interface {
	mustEmbedUnimplementedNumbersServer()
}

func RegisterNumbersServer(s grpc.ServiceRegistrar, srv NumbersServer) {
	s.RegisterService(&Numbers_ServiceDesc, srv)
}

func _Numbers_GetNumbers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NumberRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NumbersServer).GetNumbers(m, &numbersGetNumbersServer{stream})
}

type Numbers_GetNumbersServer interface {
	Send(*NumberResponse) error
	grpc.ServerStream
}

type numbersGetNumbersServer struct {
	grpc.ServerStream
}

func (x *numbersGetNumbersServer) Send(m *NumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Numbers_ServiceDesc is the grpc.ServiceDesc for Numbers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Numbers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "numbers.Numbers",
	HandlerType: (*NumbersServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNumbers",
			Handler:       _Numbers_GetNumbers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/Number.proto",
}
